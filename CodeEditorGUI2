import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import static javafx.application.Application.launch;

//
public class Main extends Application {
    private TextArea codeArea;
    private ActionManager actionManager;
    private BraceChecker braceChecker;


    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage primaryStage) {
        primaryStage.setTitle("Simple Code Editor");

        // Initialize components
        codeArea = new TextArea();
        actionManager = new ActionManager();
        braceChecker = new BraceChecker();

        //undo, redo buttons
        Button undoButton = new Button("Undo");
        Button redoButton = new Button("Redo");
        Button batchUndoButton = new Button("Batch Undo (Up to 10)");
        Button batchRedoButton = new Button("Batch Redo (Up to 10)");
        Button checkBracesButton = new Button("Check Braces");

        //open save and exit buttons
        Button open = new Button("Open");
        Button save = new Button("Save");
        Button exit = new Button("Exit");


        //open button
        open.setOnAction(actionEvent -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Open Text File");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));

            File file = fileChooser.showOpenDialog(primaryStage);
            if(file != null){
                try{
                    String content = new String(java.nio.file.Files.readAllBytes(file.toPath()));
                    codeArea.setText(content);
                }
                catch(IOException e){
                    e.printStackTrace();
                }
            }// end of if statement

        });

        //making save action event
        save.setOnAction(actionEvent -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Text File");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", ".txt"));

            File file = fileChooser.showSaveDialog(primaryStage);
            if(file != null) {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                    String textToSave = codeArea.getText();
                    writer.write(textToSave);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }//end of if statement
        });
        
        //exit button
        exit.setOnAction(actionEvent -> {
            Platform.exit();
        });

        codeArea.setPrefHeight(500);

        // Set up button actions
        undoButton.setOnAction(e -> undoAction());
        redoButton.setOnAction(e -> redoAction());
        batchUndoButton.setOnAction(e -> batchUndoAction());
        batchRedoButton.setOnAction(e -> batchRedoAction());
        checkBracesButton.setOnAction(e -> checkBraces());

        // Track text changes manually (we assume insert/delete operations here)
        codeArea.setOnKeyTyped(e -> handleTextChange());


        //making hBox with right btns
        HBox rightBox = new HBox(10);
        rightBox.setAlignment(Pos.TOP_RIGHT);
        rightBox.setPadding(new Insets(10));
        rightBox.getChildren().addAll(undoButton, redoButton, batchUndoButton, batchRedoButton,checkBracesButton, open, save, exit);


        VBox layout = new VBox(10);
        layout.getChildren().addAll(rightBox, codeArea);

        Scene scene = new Scene(layout, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    private void handleTextChange() {
        String newText = codeArea.getText();
        int position = codeArea.getCaretPosition();

        // Check whether this is an insert or delete operation
        if (newText.length() > actionManager.getText().length()) {
            String insertedText = newText.substring(actionManager.getText().length());
            actionManager.addInsertAction(insertedText, position - insertedText.length());
        } else {
            String deletedText = actionManager.getText().substring(position);
            actionManager.addDeleteAction(deletedText, position);
        }

        codeArea.setText(actionManager.getText());
        codeArea.positionCaret(position); // Restore the caret position
    }

    private void undoAction() {
        actionManager.undoAction();
        codeArea.setText(actionManager.getText());
    }

    private void redoAction() {
        actionManager.redoAction();
        codeArea.setText(actionManager.getText());
    }

    private void batchUndoAction() {
        actionManager.batchUndoRecursive(10);
        codeArea.setText(actionManager.getText());
    }

    private void batchRedoAction() {
        actionManager.batchRedoRecursive(10);
        codeArea.setText(actionManager.getText());
    }

    private void checkBraces() {
        String result = braceChecker.checkBraces(codeArea.getText());
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Brace Checker");
        alert.setHeaderText(result.equals("OK") ? "No Unpaired Braces" : "Unpaired Braces Found");
        alert.setContentText(result);
        alert.showAndWait();
    }






}
